From f92a6d66d57d4a9b21ee881429367dc8ecf4b5b3 Mon Sep 17 00:00:00 2001
From: Silvio Traversaro <silvio.traversaro@iit.it>
Date: Wed, 4 Jun 2025 11:43:40 +0200
Subject: [PATCH 1/2] Set seed for all relevant test in
 QPInverseKinematicsTest.cpp

---
 src/IK/tests/QPInverseKinematicsTest.cpp | 21 ++++++++++++++++++++-
 1 file changed, 20 insertions(+), 1 deletion(-)

diff --git a/src/IK/tests/QPInverseKinematicsTest.cpp b/src/IK/tests/QPInverseKinematicsTest.cpp
index eef3278039..a4e4a334bf 100644
--- a/src/IK/tests/QPInverseKinematicsTest.cpp
+++ b/src/IK/tests/QPInverseKinematicsTest.cpp
@@ -46,6 +46,13 @@ using namespace std::chrono_literals;
 constexpr auto robotVelocity = "robotVelocity";
 constexpr std::chrono::nanoseconds dT = 10ms;
 
+// Workaround for https://github.com/ami-iit/bipedal-locomotion-framework/issues/985
+#if defined(__linux__)
+constexpr unsigned int srand_global_seed = 2;
+#else
+constexpr unsigned int srand_global_seed = 77;
+#endif
+
 struct InverseKinematicsTasks
 {
     std::shared_ptr<SE3Task> se3Task;
@@ -349,6 +356,10 @@ inline iDynTree::Model customGetRandomModelWithNoPrismaticJoints(unsigned int nr
 
 TEST_CASE("QP-IK")
 {
+    // iDynTree test helpers are used in customGetRandomModelWithNoPrismaticJoints, so as
+    // iDynTree uses the C RNG facilities, so we use a reproducible seed for the test
+    srand(srand_global_seed);
+
     auto kinDyn = std::make_shared<iDynTree::KinDynComputations>();
     auto parameterHandler = createParameterHandler();
 
@@ -490,6 +501,10 @@ TEST_CASE("QP-IK")
 
 TEST_CASE("QP-IK [With strict limits]")
 {
+    // iDynTree test helpers are used in customGetRandomModelWithNoPrismaticJoints, so as
+    // iDynTree uses the C RNG facilities, so we use a reproducible seed for the test
+    srand(srand_global_seed);
+
     auto kinDyn = std::make_shared<iDynTree::KinDynComputations>();
     auto parameterHandler = createParameterHandler();
 
@@ -626,6 +641,10 @@ TEST_CASE("QP-IK [With strict limits]")
 
 TEST_CASE("QP-IK [With builder]")
 {
+    // iDynTree test helpers are used in customGetRandomModelWithNoPrismaticJoints, so as
+    // iDynTree uses the C RNG facilities, so we use a reproducible seed for the test
+    srand(srand_global_seed);
+
     auto kinDyn = std::make_shared<iDynTree::KinDynComputations>();
     auto parameterHandler = createParameterHandler();
 
@@ -782,7 +801,7 @@ TEST_CASE("QP-IK [Distance and Gravity tasks]")
 {
     // iDynTree test helpers are used in customGetRandomModelWithNoPrismaticJoints, so as
     // iDynTree uses the C RNG facilities, so we use a reproducible seed for the test
-    srand(42);
+    srand(srand_global_seed);
 
     auto kinDyn = std::make_shared<iDynTree::KinDynComputations>();
     auto parameterHandler = createParameterHandler();

From 9b289b8c4cc93866a6171394c83c80db78459529 Mon Sep 17 00:00:00 2001
From: Silvio Traversaro <silvio.traversaro@iit.it>
Date: Wed, 4 Jun 2025 11:08:54 +0200
Subject: [PATCH 2/2] Do not disable IK in conda-forge Linux and macOS CI

---
 .github/workflows/conda-forge-ci.yml | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/.github/workflows/conda-forge-ci.yml b/.github/workflows/conda-forge-ci.yml
index 20cf346eb6..fd74c47e83 100644
--- a/.github/workflows/conda-forge-ci.yml
+++ b/.github/workflows/conda-forge-ci.yml
@@ -81,7 +81,7 @@ jobs:
       run: |
         mkdir -p build
         cd build
-        cmake -GNinja -DBUILD_TESTING:BOOL=ON -DFRAMEWORK_COMPILE_IK:BOOL=OFF -DCMAKE_INSTALL_PREFIX=$CONDA_PREFIX \
+        cmake -GNinja -DBUILD_TESTING:BOOL=ON -DCMAKE_INSTALL_PREFIX=$CONDA_PREFIX \
               -DFRAMEWORK_COMPILE_PYTHON_BINDINGS:BOOL=ON -DUSE_SYSTEM_Catch2:BOOL=ON -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} ..
 
     - name: Build [Linux&macOS]
